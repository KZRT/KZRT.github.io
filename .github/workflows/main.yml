name: Build and Deploy to Github Pages

on:
  push:
    branches:
      - main  

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Use GitHub Actions' cache to cache dependencies on servers
      - uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      # Use GitHub Deploy Action to build and deploy to Github
      - uses: jeffreytse/jekyll-deploy-action@v0.4.0
        with:
          provider: 'github'
          token: ${{ secrets.GITHUB_TOKEN }} # It's your Personal Access Token(PAT)
          repository: ''             # Default is current repository
          branch: 'main'         # Default is gh-pages for github provider
          jekyll_src: './docs'           # Default is root directory
          jekyll_cfg: '_config.yml'  # Default is _config.yml
          jekyll_baseurl: ''         # Default is according to _config.yml
          bundler_ver: '>=0'         # Default is latest bundler version
          cname: ''                  # Default is to not use a cname
          actor: ''                  # Default is the GITHUB_ACTOR
          pre_build_commands: ''     # Installing additional dependencies (Arch Linux)

  deploy:
    # Add a dependency to the build job
    needs: build

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2 # or the latest "vX.X.X" version tag for this action

  inputs:
    name:
      description: 'Artifact name'
      required: false
      default: 'github-pages'
    path:
      description: "Path of the directory containing the static assets."
      required: true
      default: "_site/"
    retention-days:
      description: "Duration after which artifact will expire in days."
      required: false
      default: "1"
  runs:
    using: composite
    steps:
      - name: Archive artifact
        shell: sh
        if: runner.os == 'Linux'
        run: |
          chmod -c -R +rX "$INPUT_PATH" | while read line; do
            echo "::warning title=Invalid file permissions automatically fixed::$line"
          done
          tar \
            --dereference --hard-dereference \
            --directory "$INPUT_PATH" \
            -cvf "$RUNNER_TEMP/artifact.tar" \
            --exclude=.git \
            --exclude=.github \
            .
        env:
          INPUT_PATH: ${{ inputs.path }}

      # Switch to gtar (GNU tar instead of bsdtar which is the default in the MacOS runners so we can use --hard-dereference)
      - name: Archive artifact
        shell: sh
        if: runner.os == 'macOS'
        run: |
          chmod -v -R +rX "$INPUT_PATH" | while read line; do
            echo "::warning title=Invalid file permissions automatically fixed::$line"
          done
          gtar \
            --dereference --hard-dereference \
            --directory "$INPUT_PATH" \
            -cvf "$RUNNER_TEMP/artifact.tar" \
            --exclude=.git \
            --exclude=.github \
            .
        env:
          INPUT_PATH: ${{ inputs.path }}

      # Massage the paths for Windows only
      - name: Archive artifact
        shell: bash
        if: runner.os == 'Windows'
        run: |
          tar \
            --dereference --hard-dereference \
            --directory "$INPUT_PATH" \
            -cvf "$RUNNER_TEMP\artifact.tar" \
            --exclude=.git \
            --exclude=.github \
            --force-local \
            "."
        env:
          INPUT_PATH: ${{ inputs.path }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.name }}
          path: ${{ runner.temp }}/artifact.tar
          retention-days: ${{ inputs.retention-days }}
          if-no-files-found: error